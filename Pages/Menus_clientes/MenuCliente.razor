@page "/Menus_clientes/MenuCliente/{NombreUsuario}"
@using Proyect_two.Pages.Menus_clientes
@using Proyect_two.Pages.Clases_Utiles

@inject Proyect_two.UsuarioService usuarioService
@inject Proyect_two.Pages.Clases_Utiles.SolicitudService solicitudService

<h3>Bienvenido, @NombreCompleto</h3>

<div class="perfil-container">
    <div class="perfil-info">
        @* Verificar si Usuario no es nulo antes de acceder a sus propiedades *@
        @if (Usuario != null)
        {
            <p><strong>Nombre:</strong> @Usuario.Nombre</p>
            <p><strong>Usuario:</strong> @Usuario.Usuario</p>
            <p><strong>Email:</strong> @Usuario.Email</p>
        }

        <!-- Otros detalles del perfil aquí -->
    </div>
    <div class="perfil-buttons">
        <button class="btn-generar-solicitud" @onclick="GenerarSolicitud">Generar Solicitud</button>
    </div>
</div>

@if (MostrarSeleccion)
{
    <div class="opciones-container">
        <h4>Opciones Disponibles</h4>
        @foreach (var nodo in Opciones)
        {
            var opcion = (Opcion)nodo.Informacion;
            <div>
                <p>@opcion.Descripcion</p>
                <button class="btn-seleccionar" @onclick="() => SeleccionarOpcion(opcion)">Seleccionar</button>
            </div>
        }
        <button class="btn-agregar-opcion" @onclick="@(() => MostrarFormularioAgregar = true)">Agregar Opción</button>

    </div>
}

@if (MostrarFormularioAgregar)
{
    <div class="formulario-agregar">
        <h4>Agregar Nueva Opción</h4>
        <input type="text" @bind="NuevaOpcionDescripcion" placeholder="Descripción de la nueva opción" />
        <button class="btn-guardar-opcion" @onclick="AgregarNuevaOpcion">Guardar Opción</button>
    </div>
}

@if (MostrarFormulario)
{
    <div class="formulario-solicitud">
        <h4>Generar Solicitud</h4>
        <p>Descripción del Problema: @OpcionSeleccionada.Descripcion</p>
        <button class="btn-confirmar-solicitud" @onclick="ConfirmarSolicitud">Confirmar Solicitud</button>
    </div>
}

<div class="solicitudes-container">
    <h4>Mis Solicitudes</h4>
    @if (Solicitudes != null && Solicitudes.Any())
    {
        @foreach (var nodo in Solicitudes)
        {
            var solicitud = (Solicitud)nodo.Informacion;
            <div>
                <p><strong>Id:</strong> @solicitud.IdSolicitud</p>
                <p><strong>Estado:</strong> @solicitud.Estado</p>
                <button class="btn-ver-detalles">Ver Detalles</button>
            </div>
        }
    }
    else
    {
        <p>No hay solicitudes disponibles.</p>
    }
</div>

@code {
    private Usuario_classee Usuario;
    private ListaEnlazadaSimple Solicitudes = new ListaEnlazadaSimple();
    private ListaEnlazadaSimple Opciones = new ListaEnlazadaSimple();
    private bool MostrarSeleccion = false;
    private bool MostrarFormulario = false;
    private bool MostrarFormularioAgregar = false;
    private Opcion OpcionSeleccionada;
    private string NuevaOpcionDescripcion;

    [Parameter]
    public string NombreUsuario { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Usuario = await usuarioService.ObtenerUsuarioPorNombreUsuario(NombreUsuario);
        if (Usuario != null)
        {
            Solicitudes = await solicitudService.ObtenerSolicitudesPorCliente(Usuario.Id);
        }
    }

    private string NombreCompleto => Usuario != null ? $"{Usuario.Nombre} {Usuario.Usuario}" : "Usuario";

    private async Task GenerarSolicitud()
    {
        if (Usuario != null)
        {
            Opciones = await solicitudService.ObtenerOpciones();
            MostrarSeleccion = true;
            MostrarFormulario = false;
            MostrarFormularioAgregar = false;
        }
    }

    private async Task SeleccionarOpcion(Opcion opcion)
    {
        OpcionSeleccionada = opcion;
        MostrarSeleccion = false;
        MostrarFormulario = true;
        MostrarFormularioAgregar = false;
    }

    private async Task AgregarNuevaOpcion()
    {
        if (!string.IsNullOrEmpty(NuevaOpcionDescripcion))
        {
            await solicitudService.AgregarNuevaOpcion(NuevaOpcionDescripcion);
            Opciones = await solicitudService.ObtenerOpciones();
            NuevaOpcionDescripcion = string.Empty;
        }
    }

    private async Task ConfirmarSolicitud()
    {
        if (OpcionSeleccionada != null)
        {
            Solicitud nuevaSolicitud = new Solicitud
                {
                    IdCliente = Usuario.Id,
                    IdOpcion = OpcionSeleccionada.IdOpcion,
                    DescripcionProblema = OpcionSeleccionada.Descripcion,
                    Estado = "En espera",
                    IdTecnico = 0,
                    Calificacion = "Ninguna"
                };
            await solicitudService.AgregarSolicitud(nuevaSolicitud);
            MostrarFormulario = false;
        }
    }
}
