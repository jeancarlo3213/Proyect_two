@page "/MenusJefes/MenuJefe/{NombreUsuario}"
@using Proyect_two.Pages.Menus_clientes
@using Proyect_two.Pages.Clases_Utiles
@inject UsuarioService usuarioService
@inject SolicitudService solicitudService
@inject NavigationManager NavigationManager

<h3>Bienvenido, @NombreCompleto</h3>

@if (Usuario != null)
{
    <div class="perfil-container">
        <div class="perfil-info">
            <p><strong>Nombre:</strong> @Usuario.Nombre</p>
            <p><strong>Apellido:</strong> @Usuario.Apellido</p>
            <p><strong>Email:</strong> @Usuario.Email</p>
        </div>
        <div class="perfil-buttons">
            <button class="btn-editar-perfil">Editar Perfil</button>
            <button class="btn-cambiar-contraseña">Cambiar Contraseña</button>
            <button class="btn-ver-solicitudes" @onclick="CargarSolicitudesEnEspera">Ver Solicitudes en Espera</button>
        </div>
        @if (SolicitudesEnEspera != null && !SolicitudesEnEspera.ListaVacia())
        {
            <table>
                <thead>
                    <tr>
                        <th>ID Solicitud</th>
                        <th>Descripción</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Nodo nodo in SolicitudesEnEspera)
                    {
                        Solicitud solicitud = nodo.Informacion as Solicitud;
                        <tr>
                            <td>@solicitud.IdSolicitud</td>
                            <td>@solicitud.DescripcionProblema</td>
                            <td>@solicitud.Estado</td>
                            <td><button @onclick="() => AsignarTecnico(solicitud)">Asignar Técnico</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}
else
{
    <p>No se pudo cargar la información del usuario.</p>
}

@code {
    private Usuario_classee Usuario;
    private ListaEnlazadaSimple SolicitudesEnEspera;
    [Parameter]
    public string NombreUsuario { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Usuario = await usuarioService.ObtenerUsuarioPorNombreUsuario(NombreUsuario);
        SolicitudesEnEspera = new ListaEnlazadaSimple(); // Asegura que esté inicializada
    }

    private async Task CargarSolicitudesEnEspera()
    {
        SolicitudesEnEspera = await solicitudService.ObtenerSolicitudesPorEstado("En espera");
    }

    private async Task AsignarTecnico(Solicitud solicitud)
    {
        // Implementa la lógica para abrir un modal o redirigir a otra página donde se pueda seleccionar un técnico
    }

    private string NombreCompleto => Usuario != null ? $"{Usuario.Nombre} {Usuario.Apellido}" : "Usuario";
}
